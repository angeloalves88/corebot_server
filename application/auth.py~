from functools import wraps
from flask import redirect, url_for, jsonify
from flask_jwt_extended import verify_jwt_in_request, get_jwt_identity
from .models import User, Tenant

def tenant_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        try:
            verify_jwt_in_request()
            token_identity = get_jwt_identity()

            try:
                user_id, tenant_id = map(int, token_identity.split(':'))
            except ValueError:
                return redirect(url_for('bp.select_tenant'))

            user = User.query.get(user_id)
            if not user:
                return redirect(url_for('bp.login'))

            tenant = Tenant.query.get(tenant_id)
            if not tenant or tenant not in user.tenants:
                return redirect(url_for('bp.select_tenant'))

            kwargs['current_user'] = user
            kwargs['current_tenant'] = tenant

            return f(*args, **kwargs)

        except Exception as e:
            print(f"Erro no decorator tenant_required: {str(e)}")
            return redirect(url_for('bp.login'))

    return decorated_function

def api_tenant_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        try:
            verify_jwt_in_request()
            token_identity = get_jwt_identity()

            try:
                user_id, tenant_id = map(int, token_identity.split(':'))
            except ValueError:
                return jsonify({"message": "Tenant não selecionado"}), 403

            user = User.query.get(user_id)
            if not user:
                return jsonify({"message": "Usuário não encontrado"}), 401

            tenant = Tenant.query.get(tenant_id)
            if not tenant or tenant not in user.tenants:
                return jsonify({"message": "Acesso negado a este tenant"}), 403

            kwargs['current_user'] = user
            kwargs['current_tenant'] = tenant

            return f(*args, **kwargs)

        except Exception as e:
            print(f"Erro no decorator api_tenant_required: {str(e)}")
            return jsonify({"message": "Erro de autenticação"}), 401

    return decorated_function